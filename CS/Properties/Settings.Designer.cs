// Developer Express Code Central Example:
// How to create a custom summary function
// 
// XtraCharts provides you with the capability to calculate several built-in
// summary functions (MIN, MAX, SUM, AVERAGE, COUNT) against series values. In
// addition to the provided summary functions, you can create a custom one to
// calculate a summary value in any required way in your application. Moreover, the
// convenient approach of registering custom summary functions within a particular
// chart instance makes it possible for your end-users to use these functions in
// the Chart Wizard.
// The following example demonstrates how to create a custom
// summary function, which returns a product of two values (Price * Count). To
// accomplish this task, it is required to create a summary function delegate and
// register it via the ChartControl.RegisterSummaryFunction (or
// WebChartControl.RegisterSummaryFunction) method.
// The code below illustrates how
// this can be done.
// 
// You can find sample updates and versions for different programming languages here:
// http://www.devexpress.com/example=E368

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17914
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication1.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.ConnectionString)]
        [global::System.Configuration.DefaultSettingValueAttribute("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=|DataDirectory|\\nwind.mdb;Persist Se" +
            "curity Info=True")]
        public string nwindConnectionString {
            get {
                return ((string)(this["nwindConnectionString"]));
            }
        }
    }
}
